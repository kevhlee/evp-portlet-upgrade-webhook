<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%!
public static class EVPRequestOrganizationComposite {

	public EVPRequestOrganizationComposite(EVPRequestOrganization evpRequestOrganization) throws Exception {
		_evpRequestOrganization = evpRequestOrganization;
	}

	public Address getAddress() throws Exception {
		if (_address == null) {
			AlloyServiceInvoker addressAlloyServiceInvoker = new AlloyServiceInvoker(Address.class.getName());

			List<Address> addresses = addressAlloyServiceInvoker.executeDynamicQuery(new Object[] {"classNameId", PortalUtil.getClassNameId(Organization.class), "classPK", getOrganizationId(), "primary", true});

			if (!addresses.isEmpty()) {
				_address = addresses.get(0);
			}
		}

		return _address;
	}

	public Country getCountry() throws Exception {
		if ((_country == null) && (getCountryId() > 0)) {
			_country = CountryServiceUtil.getCountry(getCountryId());
		}

		return _country;
	}

	public long getCountryId() throws Exception {
		Address address = getAddress();

		if (address == null) {
			return 0;
		}

		return address.getCountryId();
	}

	public String getDescription() {
		return _evpRequestOrganization.getDescription();
	}

	public String getDescriptionTruncated() throws Exception {
		return StringUtil.shorten(getDescription(), PortletPropsValues.EVP_REQUEST_ORGANIZATION_DESCRIPTION_TRUNCATED_CHAR_COUNT);
	}

	public long getEvpGrantRequestsCount() throws Exception {
		AlloyServiceInvoker evpGrantRequestAlloyServiceInvoker = new AlloyServiceInvoker(EVPGrantRequest.class.getName());

		return evpGrantRequestAlloyServiceInvoker.executeDynamicQueryCount(new Object[] {"evpRequestOrganizationId", _evpRequestOrganization.getEvpRequestOrganizationId()});
	}

	public long getEvpRequestOrganizationId() {
		return _evpRequestOrganization.getEvpRequestOrganizationId();
	}

	public long getEvpServiceRequestsCount() throws Exception {
		AlloyServiceInvoker evpServiceRequestAlloyServiceInvoker = new AlloyServiceInvoker(EVPServiceRequest.class.getName());

		return evpServiceRequestAlloyServiceInvoker.executeDynamicQueryCount(new Object[] {"evpRequestOrganizationId", _evpRequestOrganization.getEvpRequestOrganizationId()});
	}

	public Organization getOrganization() throws Exception {
		if (_organization == null) {
			_organization = OrganizationLocalServiceUtil.fetchOrganization(getOrganizationId());
		}

		return _organization;
	}

	public long getOrganizationId() {
		return _evpRequestOrganization.getOrganizationId();
	}

	public String getTaxIdentificationNumber() {
		return _evpRequestOrganization.getTaxIdentificationNumber();
	}

	public Website getWebsite() throws Exception {
		if (_website == null) {
			AlloyServiceInvoker websiteAlloyServiceInvoker = new AlloyServiceInvoker(Website.class.getName());

			List<Website> websites = websiteAlloyServiceInvoker.executeDynamicQuery(new Object[] {"classNameId", PortalUtil.getClassNameId(Organization.class), "classPK", getOrganizationId(), "primary", true});

			if (!websites.isEmpty()) {
				_website = websites.get(0);
			}
		}

		return _website;
	}

	private Address _address;
	private Country _country;
	private EVPRequestOrganization _evpRequestOrganization;
	private Organization _organization;
	private Website _website;

}
%>