<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%!
public static class EVPDivisionUtil extends com.liferay.evp.util.EVPDivisionUtil {

	public static EVPDivision fetchRootEVPDivision(long companyId) throws Exception {
		List<EVPDivision> evpDivisions = getEVPDivisions(EVPDivisionConstants.TYPE_ROOT);

		if (!evpDivisions.isEmpty()) {
			return evpDivisions.get(0);
		}

		return null;
	}

	public static long[] getDivisionGroupIds(long userId, long companyId) {
		try {
			Set<Long> userGroupIds = new HashSet<Long>();

			List<Organization> userOrganizations = OrganizationLocalServiceUtil.getUserOrganizations(userId);

			for (Organization userOrganization : userOrganizations) {
				userGroupIds.add(userOrganization.getGroupId());
			}

			userGroupIds.add(getSubsidiaryGroupId(userId));

			return ArrayUtil.toLongArray(userGroupIds);
		}
		catch (Exception e) {
		}

		return new long[0];
	}

	public static List<EVPDivision> getEVPDivisions(int type) throws Exception {
		AlloyServiceInvoker evpDivisionAlloyServiceInvoker = new AlloyServiceInvoker(EVPDivision.class.getName());

		return evpDivisionAlloyServiceInvoker.executeDynamicQuery(getEVPDivisionDynamicQuery(type));
	}

	public static long getSubsidiaryGroupId(long userId) {
		try {
			EVPDivision subsidiaryEVPDivision = getSubsidiaryEVPDivision(userId);

			return subsidiaryEVPDivision.getOrganizationGroupId();
		}
		catch (Exception e) {
		}

		return 0;
	}

	protected static DynamicQuery getEVPDivisionDynamicQuery(int type) throws Exception {
		return getEVPDivisionDynamicQuery(0, type);
	}

}
%>