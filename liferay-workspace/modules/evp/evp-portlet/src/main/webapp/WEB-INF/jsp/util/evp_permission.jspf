<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%!
public static class EVPPermission extends AlloyPermission {

	public static boolean contains(PermissionChecker permissionChecker, long groupId, String name, long primKey, String actionId) {
		try {
			Set<Long> organizationGroupIds = EVPDivisionUtil.getOrganizationGroupIds(groupId);

			for (long organizationGroupId : organizationGroupIds) {
				if (AlloyPermission.contains(permissionChecker, organizationGroupId, name, primKey, actionId)) {
					return true;
				}
			}
		}
		catch (Exception e) {
		}

		return false;
	}

	public static boolean contains(ThemeDisplay themeDisplay, BaseModel<?> baseModel, String action) {
		String modelClassName = BeanPropertiesUtil.getString(baseModel, "modelClassName");

		long[] groupIds = new long[] {BeanPropertiesUtil.getLongSilent(baseModel, "subsidiaryGroupId"), themeDisplay.getScopeGroupId()};

		long evpRequestOrganizationId = BeanPropertiesUtil.getLongSilent(baseModel, "evpRequestOrganizationId");

		try {
			EVPRequestOrganization evpRequestOrganization = EVPRequestOrganizationLocalServiceUtil.getEVPRequestOrganization(evpRequestOrganizationId);

			Organization organization = OrganizationLocalServiceUtil.getOrganization(evpRequestOrganization.getOrganizationId());

			groupIds = ArrayUtil.append(groupIds, organization.getGroupId());
		}
		catch (Exception e) {
		}

		for (long groupId : groupIds) {
			if (contains(themeDisplay.getPermissionChecker(), groupId, modelClassName, (Long)baseModel.getPrimaryKeyObj(), formatAction(action))) {
				return true;
			}
		}

		return false;
	}

	public static boolean contains(ThemeDisplay themeDisplay, String controller, String action) {
		long[] groupIds = ArrayUtil.append(EVPDivisionUtil.getDivisionGroupIds(themeDisplay.getUserId(), themeDisplay.getCompanyId()), themeDisplay.getScopeGroupId());

		for (long groupId : groupIds) {
			if (AlloyPermission.contains(themeDisplay.getPermissionChecker(), groupId, PortletKeys.EVP, groupId, formatActionId(controller, action))) {
				return true;
			}
		}

		return false;
	}

	public static boolean contains(ThemeDisplay themeDisplay, String controller, String action, long groupId) {
		return contains(themeDisplay.getPermissionChecker(), groupId, PortletKeys.EVP, groupId, formatActionId(controller, action));
	}

	public static String formatActionId(String controller, String action) {
		return AlloyPermission.formatActionId(controller, action);
	}

	protected static String formatAction(String action) {
		StringBuilder sb = new StringBuilder(StringUtil.toUpperCase(action));

		for (int i = 0; i < action.length(); i++) {
			char c = action.charAt(i);

			if (Character.isUpperCase(c) && (i > 0)) {
				int delta = sb.length() - action.length();

				sb.insert(i + delta, CharPool.UNDERLINE);
			}
		}

		return sb.toString();
	}

}
%>