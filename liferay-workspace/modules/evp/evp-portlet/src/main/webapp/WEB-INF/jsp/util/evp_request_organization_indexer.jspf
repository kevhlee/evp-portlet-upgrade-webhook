<%--
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%!
public static class EVPRequestOrganizationIndexer extends BaseAlloyIndexer {

	public static EVPRequestOrganizationIndexer getInstance() {
		return _instance;
	}

	@Override
	public void postProcessContextQuery(BooleanQuery contextQuery, SearchContext searchContext) throws Exception {
		super.postProcessContextQuery(contextQuery, searchContext);

		long excludableEVPRequestOrganizationId = GetterUtil.getLong(searchContext.getAttribute("excludableEVPRequestOrganizationId"));

		if (excludableEVPRequestOrganizationId > 0) {
			contextQuery.addTerm(Field.ENTRY_CLASS_PK, String.valueOf(excludableEVPRequestOrganizationId), false, BooleanClauseOccur.MUST_NOT);
		}
	}

	@Override
	public void postProcessSearchQuery(BooleanQuery searchQuery, SearchContext searchContext) throws Exception {
		addSearchTerm(searchQuery, searchContext, "city", true);
		addSearchTerm(searchQuery, searchContext, "country", true);
		addSearchTerm(searchQuery, searchContext, "description", true);
		addSearchTerm(searchQuery, searchContext, "name", true);
	}

	@Override
	protected Document doGetDocument(Object obj) throws Exception {
		EVPRequestOrganization evpRequestOrganization = (EVPRequestOrganization)obj;

		Document document = getBaseModelDocument(portletId, evpRequestOrganization);

		EVPRequestOrganizationComposite evpRequestOrganizationCompsite = new EVPRequestOrganizationComposite(evpRequestOrganization);

		Address address = evpRequestOrganizationCompsite.getAddress();

		if (address != null) {
			document.addText("city", address.getCity());
			document.addKeyword("city_sortable", address.getCity());
		}

		Country country = evpRequestOrganizationCompsite.getCountry();

		if (country != null) {
			document.addText("country", country.getName());
			document.addKeyword("country_sortable", country.getName());
		}

		document.addText("description", evpRequestOrganizationCompsite.getDescription());

		Organization organization = evpRequestOrganizationCompsite.getOrganization();

		if (organization != null) {
			document.addText("name", organization.getName());
			document.addKeyword("name_sortable", organization.getName());
		}

		Website website = evpRequestOrganizationCompsite.getWebsite();

		if (website != null) {
			document.addKeyword("url_sortable", website.getUrl());
		}

		return document;
	}

	@Override
	protected Summary doGetSummary(Document document, Locale locale, String snippet, PortletURL portletURL) {
		String title = document.get(Field.ENTRY_CLASS_PK);

		String content = null;

		portletURL.setParameter("mvcPath", "/WEB-INF/jsp/evp/views/request_organizations/view.jsp");

		String evpRequestOrganizationId = document.get(Field.ENTRY_CLASS_PK);

		portletURL.setParameter("id", evpRequestOrganizationId);

		return new Summary(title, content, portletURL);
	}

	private EVPRequestOrganizationIndexer() {
		setClassName(EVPRequestOrganization.class.getName());
		setPortletId(PortletKeys.EVP);
	}

	private static EVPRequestOrganizationIndexer _instance = new EVPRequestOrganizationIndexer();

}
%>