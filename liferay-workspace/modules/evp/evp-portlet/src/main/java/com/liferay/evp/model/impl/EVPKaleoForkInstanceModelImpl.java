/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.evp.model.impl;

import com.liferay.evp.model.EVPKaleoForkInstance;
import com.liferay.evp.model.EVPKaleoForkInstanceModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.PortalUtil;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the EVPKaleoForkInstance service. Represents a row in the &quot;EVPKaleoForkInstance&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.evp.model.EVPKaleoForkInstanceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EVPKaleoForkInstanceImpl}.
 * </p>
 *
 * @author Val Nagy
 * @see EVPKaleoForkInstanceImpl
 * @see com.liferay.evp.model.EVPKaleoForkInstance
 * @see com.liferay.evp.model.EVPKaleoForkInstanceModel
 * @generated
 */
public class EVPKaleoForkInstanceModelImpl extends BaseModelImpl<EVPKaleoForkInstance>
	implements EVPKaleoForkInstanceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a e v p kaleo fork instance model instance should use the {@link com.liferay.evp.model.EVPKaleoForkInstance} interface instead.
	 */
	public static final String TABLE_NAME = "EVPKaleoForkInstance";
	public static final Object[][] TABLE_COLUMNS = {
			{ "evpKaleoForkInstanceId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "classNameId", Types.BIGINT },
			{ "classPK", Types.BIGINT },
			{ "type_", Types.INTEGER },
			{ "status", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table EVPKaleoForkInstance (evpKaleoForkInstanceId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,classNameId LONG,classPK LONG,type_ INTEGER,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table EVPKaleoForkInstance";
	public static final String ORDER_BY_JPQL = " ORDER BY evpKaleoForkInstance.evpKaleoForkInstanceId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EVPKaleoForkInstance.evpKaleoForkInstanceId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.evp.model.EVPKaleoForkInstance"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.evp.model.EVPKaleoForkInstance"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.evp.model.EVPKaleoForkInstance"));

	public EVPKaleoForkInstanceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _evpKaleoForkInstanceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEvpKaleoForkInstanceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _evpKaleoForkInstanceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EVPKaleoForkInstance.class;
	}

	@Override
	public String getModelClassName() {
		return EVPKaleoForkInstance.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("evpKaleoForkInstanceId", getEvpKaleoForkInstanceId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("classNameId", getClassNameId());
		attributes.put("classPK", getClassPK());
		attributes.put("type", getType());
		attributes.put("status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long evpKaleoForkInstanceId = (Long)attributes.get(
				"evpKaleoForkInstanceId");

		if (evpKaleoForkInstanceId != null) {
			setEvpKaleoForkInstanceId(evpKaleoForkInstanceId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long classNameId = (Long)attributes.get("classNameId");

		if (classNameId != null) {
			setClassNameId(classNameId);
		}

		Long classPK = (Long)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}

		Integer type = (Integer)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@Override
	public long getEvpKaleoForkInstanceId() {
		return _evpKaleoForkInstanceId;
	}

	@Override
	public void setEvpKaleoForkInstanceId(long evpKaleoForkInstanceId) {
		_evpKaleoForkInstanceId = evpKaleoForkInstanceId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return StringPool.BLANK;
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@Override
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		_classNameId = classNameId;
	}

	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_classPK = classPK;
	}

	@Override
	public int getType() {
		return _type;
	}

	@Override
	public void setType(int type) {
		_type = type;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			EVPKaleoForkInstance.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EVPKaleoForkInstance toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EVPKaleoForkInstance)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EVPKaleoForkInstanceImpl evpKaleoForkInstanceImpl = new EVPKaleoForkInstanceImpl();

		evpKaleoForkInstanceImpl.setEvpKaleoForkInstanceId(getEvpKaleoForkInstanceId());
		evpKaleoForkInstanceImpl.setCompanyId(getCompanyId());
		evpKaleoForkInstanceImpl.setUserId(getUserId());
		evpKaleoForkInstanceImpl.setUserName(getUserName());
		evpKaleoForkInstanceImpl.setCreateDate(getCreateDate());
		evpKaleoForkInstanceImpl.setModifiedDate(getModifiedDate());
		evpKaleoForkInstanceImpl.setClassNameId(getClassNameId());
		evpKaleoForkInstanceImpl.setClassPK(getClassPK());
		evpKaleoForkInstanceImpl.setType(getType());
		evpKaleoForkInstanceImpl.setStatus(getStatus());

		evpKaleoForkInstanceImpl.resetOriginalValues();

		return evpKaleoForkInstanceImpl;
	}

	@Override
	public int compareTo(EVPKaleoForkInstance evpKaleoForkInstance) {
		long primaryKey = evpKaleoForkInstance.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EVPKaleoForkInstance)) {
			return false;
		}

		EVPKaleoForkInstance evpKaleoForkInstance = (EVPKaleoForkInstance)obj;

		long primaryKey = evpKaleoForkInstance.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<EVPKaleoForkInstance> toCacheModel() {
		EVPKaleoForkInstanceCacheModel evpKaleoForkInstanceCacheModel = new EVPKaleoForkInstanceCacheModel();

		evpKaleoForkInstanceCacheModel.evpKaleoForkInstanceId = getEvpKaleoForkInstanceId();

		evpKaleoForkInstanceCacheModel.companyId = getCompanyId();

		evpKaleoForkInstanceCacheModel.userId = getUserId();

		evpKaleoForkInstanceCacheModel.userName = getUserName();

		String userName = evpKaleoForkInstanceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			evpKaleoForkInstanceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			evpKaleoForkInstanceCacheModel.createDate = createDate.getTime();
		}
		else {
			evpKaleoForkInstanceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			evpKaleoForkInstanceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			evpKaleoForkInstanceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		evpKaleoForkInstanceCacheModel.classNameId = getClassNameId();

		evpKaleoForkInstanceCacheModel.classPK = getClassPK();

		evpKaleoForkInstanceCacheModel.type = getType();

		evpKaleoForkInstanceCacheModel.status = getStatus();

		return evpKaleoForkInstanceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{evpKaleoForkInstanceId=");
		sb.append(getEvpKaleoForkInstanceId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", classNameId=");
		sb.append(getClassNameId());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.liferay.evp.model.EVPKaleoForkInstance");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>evpKaleoForkInstanceId</column-name><column-value><![CDATA[");
		sb.append(getEvpKaleoForkInstanceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classNameId</column-name><column-value><![CDATA[");
		sb.append(getClassNameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EVPKaleoForkInstance.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			EVPKaleoForkInstance.class
		};
	private long _evpKaleoForkInstanceId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _classNameId;
	private long _classPK;
	private int _type;
	private int _status;
	private EVPKaleoForkInstance _escapedModel;
}
