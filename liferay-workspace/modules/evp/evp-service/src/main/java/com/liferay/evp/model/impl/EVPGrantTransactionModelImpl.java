/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.evp.model.impl;

import com.liferay.evp.model.EVPGrantTransaction;
import com.liferay.evp.model.EVPGrantTransactionModel;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the EVPGrantTransaction service. Represents a row in the &quot;EVPGrantTransaction&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EVPGrantTransactionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EVPGrantTransactionImpl}.
 * </p>
 *
 * @author Val Nagy
 * @see EVPGrantTransactionImpl
 * @generated
 */
public class EVPGrantTransactionModelImpl
	extends BaseModelImpl<EVPGrantTransaction>
	implements EVPGrantTransactionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a evp grant transaction model instance should use the <code>EVPGrantTransaction</code> interface instead.
	 */
	public static final String TABLE_NAME = "EVPGrantTransaction";

	public static final Object[][] TABLE_COLUMNS = {
		{"evpGrantTransactionId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"evpGrantRequestId", Types.BIGINT}, {"fileEntryId", Types.BIGINT},
		{"grantType", Types.INTEGER}, {"amount", Types.DOUBLE},
		{"currencyCode", Types.VARCHAR}, {"date_", Types.TIMESTAMP},
		{"note", Types.VARCHAR}, {"number_", Types.VARCHAR},
		{"bankBICCode", Types.VARCHAR}, {"bankIBANCode", Types.VARCHAR},
		{"bankName", Types.VARCHAR}, {"purposeOfUse", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("evpGrantTransactionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("evpGrantRequestId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("grantType", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("amount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("currencyCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("date_", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("note", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("number_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bankBICCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bankIBANCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bankName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("purposeOfUse", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table EVPGrantTransaction (evpGrantTransactionId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,evpGrantRequestId LONG,fileEntryId LONG,grantType INTEGER,amount DOUBLE,currencyCode VARCHAR(75) null,date_ DATE null,note VARCHAR(75) null,number_ VARCHAR(75) null,bankBICCode VARCHAR(75) null,bankIBANCode VARCHAR(75) null,bankName VARCHAR(75) null,purposeOfUse VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table EVPGrantTransaction";

	public static final String ORDER_BY_JPQL =
		" ORDER BY evpGrantTransaction.evpGrantTransactionId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY EVPGrantTransaction.evpGrantTransactionId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EVPGRANTTRANSACTIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public EVPGrantTransactionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _evpGrantTransactionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEvpGrantTransactionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _evpGrantTransactionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EVPGrantTransaction.class;
	}

	@Override
	public String getModelClassName() {
		return EVPGrantTransaction.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EVPGrantTransaction, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EVPGrantTransaction, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EVPGrantTransaction, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((EVPGrantTransaction)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EVPGrantTransaction, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EVPGrantTransaction, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EVPGrantTransaction)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EVPGrantTransaction, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EVPGrantTransaction, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, EVPGrantTransaction>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			EVPGrantTransaction.class.getClassLoader(),
			EVPGrantTransaction.class, ModelWrapper.class);

		try {
			Constructor<EVPGrantTransaction> constructor =
				(Constructor<EVPGrantTransaction>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<EVPGrantTransaction, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<EVPGrantTransaction, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<EVPGrantTransaction, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<EVPGrantTransaction, Object>>();
		Map<String, BiConsumer<EVPGrantTransaction, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<EVPGrantTransaction, ?>>();

		attributeGetterFunctions.put(
			"evpGrantTransactionId",
			EVPGrantTransaction::getEvpGrantTransactionId);
		attributeSetterBiConsumers.put(
			"evpGrantTransactionId",
			(BiConsumer<EVPGrantTransaction, Long>)
				EVPGrantTransaction::setEvpGrantTransactionId);
		attributeGetterFunctions.put(
			"companyId", EVPGrantTransaction::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<EVPGrantTransaction, Long>)
				EVPGrantTransaction::setCompanyId);
		attributeGetterFunctions.put("userId", EVPGrantTransaction::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<EVPGrantTransaction, Long>)
				EVPGrantTransaction::setUserId);
		attributeGetterFunctions.put(
			"userName", EVPGrantTransaction::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<EVPGrantTransaction, String>)
				EVPGrantTransaction::setUserName);
		attributeGetterFunctions.put(
			"createDate", EVPGrantTransaction::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<EVPGrantTransaction, Date>)
				EVPGrantTransaction::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", EVPGrantTransaction::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<EVPGrantTransaction, Date>)
				EVPGrantTransaction::setModifiedDate);
		attributeGetterFunctions.put(
			"evpGrantRequestId", EVPGrantTransaction::getEvpGrantRequestId);
		attributeSetterBiConsumers.put(
			"evpGrantRequestId",
			(BiConsumer<EVPGrantTransaction, Long>)
				EVPGrantTransaction::setEvpGrantRequestId);
		attributeGetterFunctions.put(
			"fileEntryId", EVPGrantTransaction::getFileEntryId);
		attributeSetterBiConsumers.put(
			"fileEntryId",
			(BiConsumer<EVPGrantTransaction, Long>)
				EVPGrantTransaction::setFileEntryId);
		attributeGetterFunctions.put(
			"grantType", EVPGrantTransaction::getGrantType);
		attributeSetterBiConsumers.put(
			"grantType",
			(BiConsumer<EVPGrantTransaction, Integer>)
				EVPGrantTransaction::setGrantType);
		attributeGetterFunctions.put("amount", EVPGrantTransaction::getAmount);
		attributeSetterBiConsumers.put(
			"amount",
			(BiConsumer<EVPGrantTransaction, Double>)
				EVPGrantTransaction::setAmount);
		attributeGetterFunctions.put(
			"currencyCode", EVPGrantTransaction::getCurrencyCode);
		attributeSetterBiConsumers.put(
			"currencyCode",
			(BiConsumer<EVPGrantTransaction, String>)
				EVPGrantTransaction::setCurrencyCode);
		attributeGetterFunctions.put("date", EVPGrantTransaction::getDate);
		attributeSetterBiConsumers.put(
			"date",
			(BiConsumer<EVPGrantTransaction, Date>)
				EVPGrantTransaction::setDate);
		attributeGetterFunctions.put("note", EVPGrantTransaction::getNote);
		attributeSetterBiConsumers.put(
			"note",
			(BiConsumer<EVPGrantTransaction, String>)
				EVPGrantTransaction::setNote);
		attributeGetterFunctions.put("number", EVPGrantTransaction::getNumber);
		attributeSetterBiConsumers.put(
			"number",
			(BiConsumer<EVPGrantTransaction, String>)
				EVPGrantTransaction::setNumber);
		attributeGetterFunctions.put(
			"bankBICCode", EVPGrantTransaction::getBankBICCode);
		attributeSetterBiConsumers.put(
			"bankBICCode",
			(BiConsumer<EVPGrantTransaction, String>)
				EVPGrantTransaction::setBankBICCode);
		attributeGetterFunctions.put(
			"bankIBANCode", EVPGrantTransaction::getBankIBANCode);
		attributeSetterBiConsumers.put(
			"bankIBANCode",
			(BiConsumer<EVPGrantTransaction, String>)
				EVPGrantTransaction::setBankIBANCode);
		attributeGetterFunctions.put(
			"bankName", EVPGrantTransaction::getBankName);
		attributeSetterBiConsumers.put(
			"bankName",
			(BiConsumer<EVPGrantTransaction, String>)
				EVPGrantTransaction::setBankName);
		attributeGetterFunctions.put(
			"purposeOfUse", EVPGrantTransaction::getPurposeOfUse);
		attributeSetterBiConsumers.put(
			"purposeOfUse",
			(BiConsumer<EVPGrantTransaction, String>)
				EVPGrantTransaction::setPurposeOfUse);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getEvpGrantTransactionId() {
		return _evpGrantTransactionId;
	}

	@Override
	public void setEvpGrantTransactionId(long evpGrantTransactionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_evpGrantTransactionId = evpGrantTransactionId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getEvpGrantRequestId() {
		return _evpGrantRequestId;
	}

	@Override
	public void setEvpGrantRequestId(long evpGrantRequestId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_evpGrantRequestId = evpGrantRequestId;
	}

	@Override
	public long getFileEntryId() {
		return _fileEntryId;
	}

	@Override
	public void setFileEntryId(long fileEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fileEntryId = fileEntryId;
	}

	@Override
	public int getGrantType() {
		return _grantType;
	}

	@Override
	public void setGrantType(int grantType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_grantType = grantType;
	}

	@Override
	public double getAmount() {
		return _amount;
	}

	@Override
	public void setAmount(double amount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_amount = amount;
	}

	@Override
	public String getCurrencyCode() {
		if (_currencyCode == null) {
			return "";
		}
		else {
			return _currencyCode;
		}
	}

	@Override
	public void setCurrencyCode(String currencyCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_currencyCode = currencyCode;
	}

	@Override
	public Date getDate() {
		return _date;
	}

	@Override
	public void setDate(Date date) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_date = date;
	}

	@Override
	public String getNote() {
		if (_note == null) {
			return "";
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_note = note;
	}

	@Override
	public String getNumber() {
		if (_number == null) {
			return "";
		}
		else {
			return _number;
		}
	}

	@Override
	public void setNumber(String number) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_number = number;
	}

	@Override
	public String getBankBICCode() {
		if (_bankBICCode == null) {
			return "";
		}
		else {
			return _bankBICCode;
		}
	}

	@Override
	public void setBankBICCode(String bankBICCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bankBICCode = bankBICCode;
	}

	@Override
	public String getBankIBANCode() {
		if (_bankIBANCode == null) {
			return "";
		}
		else {
			return _bankIBANCode;
		}
	}

	@Override
	public void setBankIBANCode(String bankIBANCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bankIBANCode = bankIBANCode;
	}

	@Override
	public String getBankName() {
		if (_bankName == null) {
			return "";
		}
		else {
			return _bankName;
		}
	}

	@Override
	public void setBankName(String bankName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bankName = bankName;
	}

	@Override
	public String getPurposeOfUse() {
		if (_purposeOfUse == null) {
			return "";
		}
		else {
			return _purposeOfUse;
		}
	}

	@Override
	public void setPurposeOfUse(String purposeOfUse) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_purposeOfUse = purposeOfUse;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), EVPGrantTransaction.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EVPGrantTransaction toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EVPGrantTransaction>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EVPGrantTransactionImpl evpGrantTransactionImpl =
			new EVPGrantTransactionImpl();

		evpGrantTransactionImpl.setEvpGrantTransactionId(
			getEvpGrantTransactionId());
		evpGrantTransactionImpl.setCompanyId(getCompanyId());
		evpGrantTransactionImpl.setUserId(getUserId());
		evpGrantTransactionImpl.setUserName(getUserName());
		evpGrantTransactionImpl.setCreateDate(getCreateDate());
		evpGrantTransactionImpl.setModifiedDate(getModifiedDate());
		evpGrantTransactionImpl.setEvpGrantRequestId(getEvpGrantRequestId());
		evpGrantTransactionImpl.setFileEntryId(getFileEntryId());
		evpGrantTransactionImpl.setGrantType(getGrantType());
		evpGrantTransactionImpl.setAmount(getAmount());
		evpGrantTransactionImpl.setCurrencyCode(getCurrencyCode());
		evpGrantTransactionImpl.setDate(getDate());
		evpGrantTransactionImpl.setNote(getNote());
		evpGrantTransactionImpl.setNumber(getNumber());
		evpGrantTransactionImpl.setBankBICCode(getBankBICCode());
		evpGrantTransactionImpl.setBankIBANCode(getBankIBANCode());
		evpGrantTransactionImpl.setBankName(getBankName());
		evpGrantTransactionImpl.setPurposeOfUse(getPurposeOfUse());

		evpGrantTransactionImpl.resetOriginalValues();

		return evpGrantTransactionImpl;
	}

	@Override
	public int compareTo(EVPGrantTransaction evpGrantTransaction) {
		long primaryKey = evpGrantTransaction.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof EVPGrantTransaction)) {
			return false;
		}

		EVPGrantTransaction evpGrantTransaction = (EVPGrantTransaction)object;

		long primaryKey = evpGrantTransaction.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<EVPGrantTransaction> toCacheModel() {
		EVPGrantTransactionCacheModel evpGrantTransactionCacheModel =
			new EVPGrantTransactionCacheModel();

		evpGrantTransactionCacheModel.evpGrantTransactionId =
			getEvpGrantTransactionId();

		evpGrantTransactionCacheModel.companyId = getCompanyId();

		evpGrantTransactionCacheModel.userId = getUserId();

		evpGrantTransactionCacheModel.userName = getUserName();

		String userName = evpGrantTransactionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			evpGrantTransactionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			evpGrantTransactionCacheModel.createDate = createDate.getTime();
		}
		else {
			evpGrantTransactionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			evpGrantTransactionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			evpGrantTransactionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		evpGrantTransactionCacheModel.evpGrantRequestId =
			getEvpGrantRequestId();

		evpGrantTransactionCacheModel.fileEntryId = getFileEntryId();

		evpGrantTransactionCacheModel.grantType = getGrantType();

		evpGrantTransactionCacheModel.amount = getAmount();

		evpGrantTransactionCacheModel.currencyCode = getCurrencyCode();

		String currencyCode = evpGrantTransactionCacheModel.currencyCode;

		if ((currencyCode != null) && (currencyCode.length() == 0)) {
			evpGrantTransactionCacheModel.currencyCode = null;
		}

		Date date = getDate();

		if (date != null) {
			evpGrantTransactionCacheModel.date = date.getTime();
		}
		else {
			evpGrantTransactionCacheModel.date = Long.MIN_VALUE;
		}

		evpGrantTransactionCacheModel.note = getNote();

		String note = evpGrantTransactionCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			evpGrantTransactionCacheModel.note = null;
		}

		evpGrantTransactionCacheModel.number = getNumber();

		String number = evpGrantTransactionCacheModel.number;

		if ((number != null) && (number.length() == 0)) {
			evpGrantTransactionCacheModel.number = null;
		}

		evpGrantTransactionCacheModel.bankBICCode = getBankBICCode();

		String bankBICCode = evpGrantTransactionCacheModel.bankBICCode;

		if ((bankBICCode != null) && (bankBICCode.length() == 0)) {
			evpGrantTransactionCacheModel.bankBICCode = null;
		}

		evpGrantTransactionCacheModel.bankIBANCode = getBankIBANCode();

		String bankIBANCode = evpGrantTransactionCacheModel.bankIBANCode;

		if ((bankIBANCode != null) && (bankIBANCode.length() == 0)) {
			evpGrantTransactionCacheModel.bankIBANCode = null;
		}

		evpGrantTransactionCacheModel.bankName = getBankName();

		String bankName = evpGrantTransactionCacheModel.bankName;

		if ((bankName != null) && (bankName.length() == 0)) {
			evpGrantTransactionCacheModel.bankName = null;
		}

		evpGrantTransactionCacheModel.purposeOfUse = getPurposeOfUse();

		String purposeOfUse = evpGrantTransactionCacheModel.purposeOfUse;

		if ((purposeOfUse != null) && (purposeOfUse.length() == 0)) {
			evpGrantTransactionCacheModel.purposeOfUse = null;
		}

		return evpGrantTransactionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EVPGrantTransaction, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EVPGrantTransaction, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EVPGrantTransaction, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((EVPGrantTransaction)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<EVPGrantTransaction, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<EVPGrantTransaction, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EVPGrantTransaction, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((EVPGrantTransaction)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, EVPGrantTransaction>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _evpGrantTransactionId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _evpGrantRequestId;
	private long _fileEntryId;
	private int _grantType;
	private double _amount;
	private String _currencyCode;
	private Date _date;
	private String _note;
	private String _number;
	private String _bankBICCode;
	private String _bankIBANCode;
	private String _bankName;
	private String _purposeOfUse;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<EVPGrantTransaction, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((EVPGrantTransaction)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"evpGrantTransactionId", _evpGrantTransactionId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("evpGrantRequestId", _evpGrantRequestId);
		_columnOriginalValues.put("fileEntryId", _fileEntryId);
		_columnOriginalValues.put("grantType", _grantType);
		_columnOriginalValues.put("amount", _amount);
		_columnOriginalValues.put("currencyCode", _currencyCode);
		_columnOriginalValues.put("date_", _date);
		_columnOriginalValues.put("note", _note);
		_columnOriginalValues.put("number_", _number);
		_columnOriginalValues.put("bankBICCode", _bankBICCode);
		_columnOriginalValues.put("bankIBANCode", _bankIBANCode);
		_columnOriginalValues.put("bankName", _bankName);
		_columnOriginalValues.put("purposeOfUse", _purposeOfUse);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("date_", "date");
		attributeNames.put("number_", "number");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("evpGrantTransactionId", 1L);

		columnBitmasks.put("companyId", 2L);

		columnBitmasks.put("userId", 4L);

		columnBitmasks.put("userName", 8L);

		columnBitmasks.put("createDate", 16L);

		columnBitmasks.put("modifiedDate", 32L);

		columnBitmasks.put("evpGrantRequestId", 64L);

		columnBitmasks.put("fileEntryId", 128L);

		columnBitmasks.put("grantType", 256L);

		columnBitmasks.put("amount", 512L);

		columnBitmasks.put("currencyCode", 1024L);

		columnBitmasks.put("date_", 2048L);

		columnBitmasks.put("note", 4096L);

		columnBitmasks.put("number_", 8192L);

		columnBitmasks.put("bankBICCode", 16384L);

		columnBitmasks.put("bankIBANCode", 32768L);

		columnBitmasks.put("bankName", 65536L);

		columnBitmasks.put("purposeOfUse", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private EVPGrantTransaction _escapedModel;

}